#!/bin/bash
CXX_STD=CXX11

ITKRCMAKE=`${R_HOME}/bin/Rscript -e 'a<-ITKR:::itkIncludes(); cat(a)'`
ITKRLIB=`${R_HOME}/bin/Rscript -e 'a<-ITKR:::itkLibs(); cat(a)'`
compflags=`${R_HOME}/bin/Rscript -e 'a<-ITKR:::itkCompileFlags(); cat(a)'`
ITKDIR=`${R_HOME}/bin/Rscript -e 'a<-ITKR:::itkDir(); cat(a)'`

# get a version of cmake
cmaker=`which cmake`
# if [[ ! -x $cmaker ]] ; then # try r version
#   cmaker=`${R_HOME}/bin/Rscript -e 'a<-cmaker::cmake()'`
# fi
if [[ `uname` -eq Darwin ]] ; then
  CMAKE_BUILD_TYPE=Release
fi
if [[ $TRAVIS -eq true ]] ; then
  CMAKE_BUILD_TYPE=Release
fi


gitcmd=`which git`
if [[ ! -x $gitcmd ]] ; then # try install git
  apt-get install -y git-core
fi
gitcmd=`which git`
if [[ ! -x $gitcmd ]] ; then # try install git
  exit 1
fi

cd ./src
# platform-specific Makevars
echo "myantssource=\${PWD}/ants/" > Makevars
# echo "ITK = \`\$(R_HOME)/bin/Rscript -e 'ITKR:::itkIncludes()'\`" >> Makevars
echo "ITK=${ITKRCMAKE}" >> Makevars

needVCL_CAN_STATIC_CONST_INIT_FLOAT=0
if [[ ${#CC} -gt 0 ]] ; then # test the requested compiler
  temp=$(${CC} --version | grep clang)
  if [[ ${#temp} -gt 0 ]] ; then
    needVCL_CAN_STATIC_CONST_INIT_FLOAT=1
  fi
else # just try gcc directly
  temp=$(gcc --version | grep clang)
  if [[ ${#temp} -gt 0 ]] ; then
    needVCL_CAN_STATIC_CONST_INIT_FLOAT=1
  fi
fi
echo $OSTYPE $needVCL_CAN_STATIC_CONST_INIT_FLOAT
echo "PKG_CPPFLAGS = -I\${ITK} -I\${PWD} -I\${myantssource}/Examples/include/ \
  -I\${myantssource}/Utilities -I\${myantssource}/Examples/ -I../inst/include/\
  -I\${myantssource}/Tensor/ " >> Makevars

echo "CXX_STD = CXX11" >> Makevars

echo "myantslib=\${PWD}/antb/lib/" >> Makevars

echo "libants=\`find \${myantslib} -name \"lib*.a\"\`" >> Makevars

# echo "libitk=\`find \\\`\$(R_HOME)/bin/Rscript -e 'ITKR:::itkLibs()'\\\` -name \"lib*.a\"\` " >> Makevars
echo "libitk=\`find ${ITKRLIB} -name \"lib*.a\"\`" >> Makevars

echo "PKG_LIBS=\${libitk} \${libants}" >> Makevars

# echo "PKG_LIBS=\${libitk} \${libants} \${libitk} \${libants} \${libitk} \
#                  \${libants} \${libitk} \${libants} \${itklib} \${libants} \
#                  \${libitk} \${libants} \${itklib} \${libants} \${itklib} \
#                  \${libants} \${libitk} \${libants} \${itklib}" >> Makevars

echo ".PHONY: all libs" >> Makevars

echo "all: \$(SHLIB)" >> Makevars
# echo "all: \$(CHECKER) \$(SHLIB)" >> Makevars
# echo "\$(CHECKER): ; @echo \"Myantssource is \${myantssource}\" && @echo \"PWD is \${PWD}\" && @echo \"ITK is \${ITK}\"" >> Makevars

echo "\$(SHLIB): libs" >> Makevars

echo "libs: ; cd \${PWD}/antb && \$(MAKE) -j 2 &&  cd \${PWD}/antb/ANTS-build && \$(MAKE) all install " >> Makevars

# get / set up ANTs code
antsgit=https://github.com/stnava/ANTs.git
# antstag=`tail -n 1 ../data/antsVersions.csv  | cut -d ';' -f 2`
# antstag=18506d4b305e7abd33c435ecaf7dc3f0672cca72
antstag=6bc3e652d7628b428896ddaec837248a61d2af3b # for 4.12
antsrtag=`git log --pretty=format:'%H' -n 1`
if [[ ! -s ants/CMakeLists.txt  ]] ; then
    git clone $antsbranch $antsgit ants
fi
if [[ ! -d ../data/ ]] ; then
  mkdir -p ../data
fi
echo "Dependency;GitTag" > ../data/antsVersions.csv
echo "ANTs;${antstag}" >> ../data/antsVersions.csv
echo "ANTsRCore;${antsrtag}" >> ../data/antsVersions.csv
cd ants
if [[ -d .git ]]; then
    git checkout master
    git pull
    git checkout $antstag
    # needed for warning
    rm -rf .git
fi
cd ../
if [[ ! -s antb ]] ; then
  mkdir antb
fi
cp ../inst/include/antscore.h ./ants/Examples/include/ants.h
cp -r ants/Examples/include/* ../inst/include/
cp -r ants/Utilities/* ../inst/include/
cp -r ants/Examples/*  ../inst/include/
cp -r ants/Tensor/*  ../inst/include/
cd ./antb
${cmaker} -DITK_DIR:PATH=${ITKDIR} \
    -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} ${compflags} -DNDEBUG  "\
    -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} ${compflags} -DNDEBUG  "\
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_ALL_ANTS_APPS=OFF \
    -DUSE_SYSTEM_ITK=OFF \
    -DBUILD_TESTING=OFF \
    -DCOPY_SCRIPT_FILES_TO_BIN_DIR=OFF \
    -DCMAKE_INSTALL_PREFIX:PATH=${R_PACKAGE_DIR}/libs/  \
    -DCMAKE_BUILD_TYPE:STRING="${CMAKE_BUILD_TYPE}"  ../ants
cd ../
