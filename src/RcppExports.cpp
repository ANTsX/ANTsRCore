// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ANTSIntegrateVectorField
SEXP ANTSIntegrateVectorField(SEXP r_refimg, SEXP r_velocity, SEXP r_deformation, SEXP r_t0, SEXP r_t1, SEXP r_dt);
RcppExport SEXP _ANTsRCore_ANTSIntegrateVectorField(SEXP r_refimgSEXP, SEXP r_velocitySEXP, SEXP r_deformationSEXP, SEXP r_t0SEXP, SEXP r_t1SEXP, SEXP r_dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_refimg(r_refimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_velocity(r_velocitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_deformation(r_deformationSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_t0(r_t0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_t1(r_t1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dt(r_dtSEXP);
    rcpp_result_gen = Rcpp::wrap(ANTSIntegrateVectorField(r_refimg, r_velocity, r_deformation, r_t0, r_t1, r_dt));
    return rcpp_result_gen;
END_RCPP
}
// addNoiseToImageR
SEXP addNoiseToImageR(SEXP r_inputImage, SEXP r_whichNoiseModel, SEXP r_parameters);
RcppExport SEXP _ANTsRCore_addNoiseToImageR(SEXP r_inputImageSEXP, SEXP r_whichNoiseModelSEXP, SEXP r_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inputImage(r_inputImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_whichNoiseModel(r_whichNoiseModelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parameters(r_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(addNoiseToImageR(r_inputImage, r_whichNoiseModel, r_parameters));
    return rcpp_result_gen;
END_RCPP
}
// Atropos
SEXP Atropos(SEXP r_args);
RcppExport SEXP _ANTsRCore_Atropos(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(Atropos(r_args));
    return rcpp_result_gen;
END_RCPP
}
// createJacobianDeterminantImageR
SEXP createJacobianDeterminantImageR(SEXP r_domainImg, SEXP r_tx, SEXP r_dolog, SEXP r_dogeom);
RcppExport SEXP _ANTsRCore_createJacobianDeterminantImageR(SEXP r_domainImgSEXP, SEXP r_txSEXP, SEXP r_dologSEXP, SEXP r_dogeomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_domainImg(r_domainImgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_tx(r_txSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dolog(r_dologSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dogeom(r_dogeomSEXP);
    rcpp_result_gen = Rcpp::wrap(createJacobianDeterminantImageR(r_domainImg, r_tx, r_dolog, r_dogeom));
    return rcpp_result_gen;
END_RCPP
}
// DenoiseImage
SEXP DenoiseImage(SEXP r_args);
RcppExport SEXP _ANTsRCore_DenoiseImage(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(DenoiseImage(r_args));
    return rcpp_result_gen;
END_RCPP
}
// fitBsplineDisplacementFieldR
SEXP fitBsplineDisplacementFieldR(SEXP r_dimensionality, SEXP r_displacementField, SEXP r_displacementFieldWeightImage, SEXP r_displacementOrigins, SEXP r_displacements, SEXP r_displacementWeights, SEXP r_origin, SEXP r_spacing, SEXP r_size, SEXP r_direction, SEXP r_numberOfFittingLevels, SEXP r_numberOfControlPoints, SEXP r_splineOrder, SEXP r_enforceStationaryBoundary, SEXP r_estimateInverse, SEXP r_rasterizePoints);
RcppExport SEXP _ANTsRCore_fitBsplineDisplacementFieldR(SEXP r_dimensionalitySEXP, SEXP r_displacementFieldSEXP, SEXP r_displacementFieldWeightImageSEXP, SEXP r_displacementOriginsSEXP, SEXP r_displacementsSEXP, SEXP r_displacementWeightsSEXP, SEXP r_originSEXP, SEXP r_spacingSEXP, SEXP r_sizeSEXP, SEXP r_directionSEXP, SEXP r_numberOfFittingLevelsSEXP, SEXP r_numberOfControlPointsSEXP, SEXP r_splineOrderSEXP, SEXP r_enforceStationaryBoundarySEXP, SEXP r_estimateInverseSEXP, SEXP r_rasterizePointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_dimensionality(r_dimensionalitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementField(r_displacementFieldSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementFieldWeightImage(r_displacementFieldWeightImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementOrigins(r_displacementOriginsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacements(r_displacementsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementWeights(r_displacementWeightsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_origin(r_originSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spacing(r_spacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_size(r_sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfFittingLevels(r_numberOfFittingLevelsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfControlPoints(r_numberOfControlPointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_splineOrder(r_splineOrderSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_enforceStationaryBoundary(r_enforceStationaryBoundarySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_estimateInverse(r_estimateInverseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_rasterizePoints(r_rasterizePointsSEXP);
    rcpp_result_gen = Rcpp::wrap(fitBsplineDisplacementFieldR(r_dimensionality, r_displacementField, r_displacementFieldWeightImage, r_displacementOrigins, r_displacements, r_displacementWeights, r_origin, r_spacing, r_size, r_direction, r_numberOfFittingLevels, r_numberOfControlPoints, r_splineOrder, r_enforceStationaryBoundary, r_estimateInverse, r_rasterizePoints));
    return rcpp_result_gen;
END_RCPP
}
// fitBsplineObjectToScatteredDataR
SEXP fitBsplineObjectToScatteredDataR(SEXP r_scatteredData, SEXP r_parametricData, SEXP r_dataWeights, SEXP r_parametricDomainOrigin, SEXP r_parametricDomainSpacing, SEXP r_parametricDomainSize, SEXP r_isParametricDimensionClosed, SEXP r_numberOfFittingLevels, SEXP r_numberOfControlPoints, SEXP r_splineOrder);
RcppExport SEXP _ANTsRCore_fitBsplineObjectToScatteredDataR(SEXP r_scatteredDataSEXP, SEXP r_parametricDataSEXP, SEXP r_dataWeightsSEXP, SEXP r_parametricDomainOriginSEXP, SEXP r_parametricDomainSpacingSEXP, SEXP r_parametricDomainSizeSEXP, SEXP r_isParametricDimensionClosedSEXP, SEXP r_numberOfFittingLevelsSEXP, SEXP r_numberOfControlPointsSEXP, SEXP r_splineOrderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_scatteredData(r_scatteredDataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parametricData(r_parametricDataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dataWeights(r_dataWeightsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parametricDomainOrigin(r_parametricDomainOriginSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parametricDomainSpacing(r_parametricDomainSpacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parametricDomainSize(r_parametricDomainSizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isParametricDimensionClosed(r_isParametricDimensionClosedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfFittingLevels(r_numberOfFittingLevelsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfControlPoints(r_numberOfControlPointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_splineOrder(r_splineOrderSEXP);
    rcpp_result_gen = Rcpp::wrap(fitBsplineObjectToScatteredDataR(r_scatteredData, r_parametricData, r_dataWeights, r_parametricDomainOrigin, r_parametricDomainSpacing, r_parametricDomainSize, r_isParametricDimensionClosed, r_numberOfFittingLevels, r_numberOfControlPoints, r_splineOrder));
    return rcpp_result_gen;
END_RCPP
}
// fitThinPlateSplineDisplacementFieldR
SEXP fitThinPlateSplineDisplacementFieldR(SEXP r_dimensionality, SEXP r_displacementOrigins, SEXP r_displacements, SEXP r_origin, SEXP r_spacing, SEXP r_size, SEXP r_direction);
RcppExport SEXP _ANTsRCore_fitThinPlateSplineDisplacementFieldR(SEXP r_dimensionalitySEXP, SEXP r_displacementOriginsSEXP, SEXP r_displacementsSEXP, SEXP r_originSEXP, SEXP r_spacingSEXP, SEXP r_sizeSEXP, SEXP r_directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_dimensionality(r_dimensionalitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementOrigins(r_displacementOriginsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacements(r_displacementsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_origin(r_originSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spacing(r_spacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_size(r_sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    rcpp_result_gen = Rcpp::wrap(fitThinPlateSplineDisplacementFieldR(r_dimensionality, r_displacementOrigins, r_displacements, r_origin, r_spacing, r_size, r_direction));
    return rcpp_result_gen;
END_RCPP
}
// HausdorffDistanceR
SEXP HausdorffDistanceR(SEXP r_inputImage1, SEXP r_inputImage2);
RcppExport SEXP _ANTsRCore_HausdorffDistanceR(SEXP r_inputImage1SEXP, SEXP r_inputImage2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inputImage1(r_inputImage1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_inputImage2(r_inputImage2SEXP);
    rcpp_result_gen = Rcpp::wrap(HausdorffDistanceR(r_inputImage1, r_inputImage2));
    return rcpp_result_gen;
END_RCPP
}
// hessianObjectnessR
SEXP hessianObjectnessR(SEXP r_inputImage, SEXP r_objectDimension, SEXP r_isBrightObject, SEXP r_sigmaMin, SEXP r_sigmaMax, SEXP r_numberOfSigmaSteps, SEXP r_useSigmaLogarithmicSpacing, SEXP r_alpha, SEXP r_beta, SEXP r_gamma, SEXP r_setScaleObjectnessMeasure);
RcppExport SEXP _ANTsRCore_hessianObjectnessR(SEXP r_inputImageSEXP, SEXP r_objectDimensionSEXP, SEXP r_isBrightObjectSEXP, SEXP r_sigmaMinSEXP, SEXP r_sigmaMaxSEXP, SEXP r_numberOfSigmaStepsSEXP, SEXP r_useSigmaLogarithmicSpacingSEXP, SEXP r_alphaSEXP, SEXP r_betaSEXP, SEXP r_gammaSEXP, SEXP r_setScaleObjectnessMeasureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inputImage(r_inputImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_objectDimension(r_objectDimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isBrightObject(r_isBrightObjectSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sigmaMin(r_sigmaMinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sigmaMax(r_sigmaMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfSigmaSteps(r_numberOfSigmaStepsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_useSigmaLogarithmicSpacing(r_useSigmaLogarithmicSpacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_alpha(r_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_gamma(r_gammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_setScaleObjectnessMeasure(r_setScaleObjectnessMeasureSEXP);
    rcpp_result_gen = Rcpp::wrap(hessianObjectnessR(r_inputImage, r_objectDimension, r_isBrightObject, r_sigmaMin, r_sigmaMax, r_numberOfSigmaSteps, r_useSigmaLogarithmicSpacing, r_alpha, r_beta, r_gamma, r_setScaleObjectnessMeasure));
    return rcpp_result_gen;
END_RCPP
}
// histogramMatchImageR
SEXP histogramMatchImageR(SEXP r_sourceImage, SEXP r_referenceImage, SEXP r_numberOfHistogramBins, SEXP r_numberOfMatchPoints, SEXP r_useThresholdAtMeanIntensity);
RcppExport SEXP _ANTsRCore_histogramMatchImageR(SEXP r_sourceImageSEXP, SEXP r_referenceImageSEXP, SEXP r_numberOfHistogramBinsSEXP, SEXP r_numberOfMatchPointsSEXP, SEXP r_useThresholdAtMeanIntensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_sourceImage(r_sourceImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_referenceImage(r_referenceImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfHistogramBins(r_numberOfHistogramBinsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfMatchPoints(r_numberOfMatchPointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_useThresholdAtMeanIntensity(r_useThresholdAtMeanIntensitySEXP);
    rcpp_result_gen = Rcpp::wrap(histogramMatchImageR(r_sourceImage, r_referenceImage, r_numberOfHistogramBins, r_numberOfMatchPoints, r_useThresholdAtMeanIntensity));
    return rcpp_result_gen;
END_RCPP
}
// integrateVelocityFieldR
SEXP integrateVelocityFieldR(SEXP r_dimensionality, SEXP r_velocityField, SEXP r_lowerBound, SEXP r_upperBound, SEXP r_numberOfIntegrationSteps);
RcppExport SEXP _ANTsRCore_integrateVelocityFieldR(SEXP r_dimensionalitySEXP, SEXP r_velocityFieldSEXP, SEXP r_lowerBoundSEXP, SEXP r_upperBoundSEXP, SEXP r_numberOfIntegrationStepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_dimensionality(r_dimensionalitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_velocityField(r_velocityFieldSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_lowerBound(r_lowerBoundSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_upperBound(r_upperBoundSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfIntegrationSteps(r_numberOfIntegrationStepsSEXP);
    rcpp_result_gen = Rcpp::wrap(integrateVelocityFieldR(r_dimensionality, r_velocityField, r_lowerBound, r_upperBound, r_numberOfIntegrationSteps));
    return rcpp_result_gen;
END_RCPP
}
// invertDisplacementFieldR
SEXP invertDisplacementFieldR(SEXP r_dimensionality, SEXP r_displacementField, SEXP r_inverseFieldInitialEstimate, SEXP r_maxNumberOfIterations, SEXP r_meanErrorToleranceThreshold, SEXP r_maxErrorToleranceThreshold, SEXP r_enforceBoundaryCondition);
RcppExport SEXP _ANTsRCore_invertDisplacementFieldR(SEXP r_dimensionalitySEXP, SEXP r_displacementFieldSEXP, SEXP r_inverseFieldInitialEstimateSEXP, SEXP r_maxNumberOfIterationsSEXP, SEXP r_meanErrorToleranceThresholdSEXP, SEXP r_maxErrorToleranceThresholdSEXP, SEXP r_enforceBoundaryConditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_dimensionality(r_dimensionalitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_displacementField(r_displacementFieldSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_inverseFieldInitialEstimate(r_inverseFieldInitialEstimateSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maxNumberOfIterations(r_maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_meanErrorToleranceThreshold(r_meanErrorToleranceThresholdSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maxErrorToleranceThreshold(r_maxErrorToleranceThresholdSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_enforceBoundaryCondition(r_enforceBoundaryConditionSEXP);
    rcpp_result_gen = Rcpp::wrap(invertDisplacementFieldR(r_dimensionality, r_displacementField, r_inverseFieldInitialEstimate, r_maxNumberOfIterations, r_meanErrorToleranceThreshold, r_maxErrorToleranceThreshold, r_enforceBoundaryCondition));
    return rcpp_result_gen;
END_RCPP
}
// KellyKapowski
SEXP KellyKapowski(SEXP r_args);
RcppExport SEXP _ANTsRCore_KellyKapowski(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(KellyKapowski(r_args));
    return rcpp_result_gen;
END_RCPP
}
// LabelClustersUniquely
SEXP LabelClustersUniquely(SEXP r_args);
RcppExport SEXP _ANTsRCore_LabelClustersUniquely(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(LabelClustersUniquely(r_args));
    return rcpp_result_gen;
END_RCPP
}
// LabelGeometryMeasures
SEXP LabelGeometryMeasures(SEXP r_args);
RcppExport SEXP _ANTsRCore_LabelGeometryMeasures(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(LabelGeometryMeasures(r_args));
    return rcpp_result_gen;
END_RCPP
}
// labelOverlapMeasuresR
SEXP labelOverlapMeasuresR(SEXP r_sourceImage, SEXP r_targetImage);
RcppExport SEXP _ANTsRCore_labelOverlapMeasuresR(SEXP r_sourceImageSEXP, SEXP r_targetImageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_sourceImage(r_sourceImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_targetImage(r_targetImageSEXP);
    rcpp_result_gen = Rcpp::wrap(labelOverlapMeasuresR(r_sourceImage, r_targetImage));
    return rcpp_result_gen;
END_RCPP
}
// N3BiasFieldCorrection
SEXP N3BiasFieldCorrection(SEXP r_args);
RcppExport SEXP _ANTsRCore_N3BiasFieldCorrection(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(N3BiasFieldCorrection(r_args));
    return rcpp_result_gen;
END_RCPP
}
// N4BiasFieldCorrection
SEXP N4BiasFieldCorrection(SEXP r_args);
RcppExport SEXP _ANTsRCore_N4BiasFieldCorrection(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(N4BiasFieldCorrection(r_args));
    return rcpp_result_gen;
END_RCPP
}
// simulateBSplineDisplacementFieldR
SEXP simulateBSplineDisplacementFieldR(SEXP r_domainImage, SEXP r_numberOfRandomPoints, SEXP r_standardDeviationDisplacementField, SEXP r_enforceStationaryBoundary, SEXP r_numberOfFittingLevels, SEXP r_numberOfControlPoints);
RcppExport SEXP _ANTsRCore_simulateBSplineDisplacementFieldR(SEXP r_domainImageSEXP, SEXP r_numberOfRandomPointsSEXP, SEXP r_standardDeviationDisplacementFieldSEXP, SEXP r_enforceStationaryBoundarySEXP, SEXP r_numberOfFittingLevelsSEXP, SEXP r_numberOfControlPointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_domainImage(r_domainImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfRandomPoints(r_numberOfRandomPointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_standardDeviationDisplacementField(r_standardDeviationDisplacementFieldSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_enforceStationaryBoundary(r_enforceStationaryBoundarySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfFittingLevels(r_numberOfFittingLevelsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfControlPoints(r_numberOfControlPointsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateBSplineDisplacementFieldR(r_domainImage, r_numberOfRandomPoints, r_standardDeviationDisplacementField, r_enforceStationaryBoundary, r_numberOfFittingLevels, r_numberOfControlPoints));
    return rcpp_result_gen;
END_RCPP
}
// simulateExponentialDisplacementFieldR
SEXP simulateExponentialDisplacementFieldR(SEXP r_domainImage, SEXP r_numberOfRandomPoints, SEXP r_standardDeviationDisplacementField, SEXP r_enforceStationaryBoundary, SEXP r_standardDeviationSmoothing);
RcppExport SEXP _ANTsRCore_simulateExponentialDisplacementFieldR(SEXP r_domainImageSEXP, SEXP r_numberOfRandomPointsSEXP, SEXP r_standardDeviationDisplacementFieldSEXP, SEXP r_enforceStationaryBoundarySEXP, SEXP r_standardDeviationSmoothingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_domainImage(r_domainImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfRandomPoints(r_numberOfRandomPointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_standardDeviationDisplacementField(r_standardDeviationDisplacementFieldSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_enforceStationaryBoundary(r_enforceStationaryBoundarySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_standardDeviationSmoothing(r_standardDeviationSmoothingSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateExponentialDisplacementFieldR(r_domainImage, r_numberOfRandomPoints, r_standardDeviationDisplacementField, r_enforceStationaryBoundary, r_standardDeviationSmoothing));
    return rcpp_result_gen;
END_RCPP
}
// ThresholdImage
SEXP ThresholdImage(SEXP r_args);
RcppExport SEXP _ANTsRCore_ThresholdImage(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(ThresholdImage(r_args));
    return rcpp_result_gen;
END_RCPP
}
// AntsAffineInitializer
SEXP AntsAffineInitializer(SEXP r_args);
RcppExport SEXP _ANTsRCore_AntsAffineInitializer(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsAffineInitializer(r_args));
    return rcpp_result_gen;
END_RCPP
}
// AntsApplyTransforms
SEXP AntsApplyTransforms(SEXP r_args);
RcppExport SEXP _ANTsRCore_AntsApplyTransforms(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsApplyTransforms(r_args));
    return rcpp_result_gen;
END_RCPP
}
// AntsApplyTransformsToPoints
SEXP AntsApplyTransformsToPoints(SEXP r_args);
RcppExport SEXP _ANTsRCore_AntsApplyTransformsToPoints(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsApplyTransformsToPoints(r_args));
    return rcpp_result_gen;
END_RCPP
}
// antsImage
SEXP antsImage(SEXP r_pixeltype, SEXP r_dimension, SEXP r_components);
RcppExport SEXP _ANTsRCore_antsImage(SEXP r_pixeltypeSEXP, SEXP r_dimensionSEXP, SEXP r_componentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_pixeltype(r_pixeltypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_components(r_componentsSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage(r_pixeltype, r_dimension, r_components));
    return rcpp_result_gen;
END_RCPP
}
// antsImageArith
SEXP antsImageArith(SEXP r_in_image1, SEXP r_in_image2, SEXP r_op);
RcppExport SEXP _ANTsRCore_antsImageArith(SEXP r_in_image1SEXP, SEXP r_in_image2SEXP, SEXP r_opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_in_image2(r_in_image2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_op(r_opSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageArith(r_in_image1, r_in_image2, r_op));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_isna
SEXP antsImage_isna(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_antsImage_isna(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_isna(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_dim
SEXP antsImage_dim(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_antsImage_dim(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_dim(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_asVector
SEXP antsImage_asVector(SEXP r_antsimage, SEXP r_mask, SEXP r_antsregion);
RcppExport SEXP _ANTsRCore_antsImage_asVector(SEXP r_antsimageSEXP, SEXP r_maskSEXP, SEXP r_antsregionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsregion(r_antsregionSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_asVector(r_antsimage, r_mask, r_antsregion));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetNeighborhoodMatrix
SEXP antsImage_GetNeighborhoodMatrix(SEXP r_antsimage, SEXP r_maskimage, SEXP r_radius, SEXP r_physical, SEXP r_boundary, SEXP r_spatial, SEXP r_gradient);
RcppExport SEXP _ANTsRCore_antsImage_GetNeighborhoodMatrix(SEXP r_antsimageSEXP, SEXP r_maskimageSEXP, SEXP r_radiusSEXP, SEXP r_physicalSEXP, SEXP r_boundarySEXP, SEXP r_spatialSEXP, SEXP r_gradientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maskimage(r_maskimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_radius(r_radiusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_physical(r_physicalSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_boundary(r_boundarySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spatial(r_spatialSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_gradient(r_gradientSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetNeighborhoodMatrix(r_antsimage, r_maskimage, r_radius, r_physical, r_boundary, r_spatial, r_gradient));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetNeighborhood
SEXP antsImage_GetNeighborhood(SEXP r_antsimage, SEXP r_index, SEXP r_kernel, SEXP r_radius, SEXP physical);
RcppExport SEXP _ANTsRCore_antsImage_GetNeighborhood(SEXP r_antsimageSEXP, SEXP r_indexSEXP, SEXP r_kernelSEXP, SEXP r_radiusSEXP, SEXP physicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_index(r_indexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_kernel(r_kernelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_radius(r_radiusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type physical(physicalSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetNeighborhood(r_antsimage, r_index, r_kernel, r_radius, physical));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetPixels
SEXP antsImage_GetPixels(SEXP r_antsimage, SEXP r_indices);
RcppExport SEXP _ANTsRCore_antsImage_GetPixels(SEXP r_antsimageSEXP, SEXP r_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_indices(r_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetPixels(r_antsimage, r_indices));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetPixels
SEXP antsImage_SetPixels(SEXP r_antsimage, SEXP r_coordinates, SEXP r_value);
RcppExport SEXP _ANTsRCore_antsImage_SetPixels(SEXP r_antsimageSEXP, SEXP r_coordinatesSEXP, SEXP r_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_coordinates(r_coordinatesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_value(r_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetPixels(r_antsimage, r_coordinates, r_value));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetSpacing
SEXP antsImage_GetSpacing(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_antsImage_GetSpacing(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetSpacing(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetSpacing
SEXP antsImage_SetSpacing(SEXP r_antsimage, SEXP r_spacing);
RcppExport SEXP _ANTsRCore_antsImage_SetSpacing(SEXP r_antsimageSEXP, SEXP r_spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spacing(r_spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetSpacing(r_antsimage, r_spacing));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetOrigin
SEXP antsImage_GetOrigin(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_antsImage_GetOrigin(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetOrigin(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetOrigin
SEXP antsImage_SetOrigin(SEXP r_antsimage, SEXP r_origin);
RcppExport SEXP _ANTsRCore_antsImage_SetOrigin(SEXP r_antsimageSEXP, SEXP r_originSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_origin(r_originSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetOrigin(r_antsimage, r_origin));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_GetDirection
SEXP antsImage_GetDirection(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_antsImage_GetDirection(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_GetDirection(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetDirection
SEXP antsImage_SetDirection(SEXP r_antsimage, SEXP r_direction);
RcppExport SEXP _ANTsRCore_antsImage_SetDirection(SEXP r_antsimageSEXP, SEXP r_directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetDirection(r_antsimage, r_direction));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_TransformIndexToPhysicalPoint
SEXP antsImage_TransformIndexToPhysicalPoint(SEXP r_antsimage, SEXP r_index);
RcppExport SEXP _ANTsRCore_antsImage_TransformIndexToPhysicalPoint(SEXP r_antsimageSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_TransformIndexToPhysicalPoint(r_antsimage, r_index));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_TransformPhysicalPointToIndex
SEXP antsImage_TransformPhysicalPointToIndex(SEXP r_antsimage, SEXP r_point);
RcppExport SEXP _ANTsRCore_antsImage_TransformPhysicalPointToIndex(SEXP r_antsimageSEXP, SEXP r_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_point(r_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_TransformPhysicalPointToIndex(r_antsimage, r_point));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetRegion
SEXP antsImage_SetRegion(SEXP r_antsimage, SEXP r_mask, SEXP r_antsregion, SEXP r_value);
RcppExport SEXP _ANTsRCore_antsImage_SetRegion(SEXP r_antsimageSEXP, SEXP r_maskSEXP, SEXP r_antsregionSEXP, SEXP r_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsregion(r_antsregionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_value(r_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetRegion(r_antsimage, r_mask, r_antsregion, r_value));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_SetByImage
SEXP antsImage_SetByImage(SEXP r_antsimage, SEXP r_mask, SEXP r_value);
RcppExport SEXP _ANTsRCore_antsImage_SetByImage(SEXP r_antsimageSEXP, SEXP r_maskSEXP, SEXP r_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_value(r_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_SetByImage(r_antsimage, r_mask, r_value));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_asantsImage
SEXP antsImage_asantsImage(SEXP r_vector, SEXP r_pixeltype, SEXP r_spacing, SEXP r_origin, SEXP r_direction, SEXP r_components);
RcppExport SEXP _ANTsRCore_antsImage_asantsImage(SEXP r_vectorSEXP, SEXP r_pixeltypeSEXP, SEXP r_spacingSEXP, SEXP r_originSEXP, SEXP r_directionSEXP, SEXP r_componentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_vector(r_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_pixeltype(r_pixeltypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spacing(r_spacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_origin(r_originSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_components(r_componentsSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_asantsImage(r_vector, r_pixeltype, r_spacing, r_origin, r_direction, r_components));
    return rcpp_result_gen;
END_RCPP
}
// antsImage_RelationalOperators
SEXP antsImage_RelationalOperators(SEXP r_antsimage, SEXP r_value, SEXP r_antsregion, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImage_RelationalOperators(SEXP r_antsimageSEXP, SEXP r_valueSEXP, SEXP r_antsregionSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_value(r_valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsregion(r_antsregionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImage_RelationalOperators(r_antsimage, r_value, r_antsregion, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageArithImageNumeric
SEXP antsImageArithImageNumeric(SEXP r_antsimage, SEXP r_numeric, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageArithImageNumeric(SEXP r_antsimageSEXP, SEXP r_numericSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numeric(r_numericSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageArithImageNumeric(r_antsimage, r_numeric, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageArithNumericImage
SEXP antsImageArithNumericImage(SEXP r_numeric, SEXP r_antsimage, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageArithNumericImage(SEXP r_numericSEXP, SEXP r_antsimageSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_numeric(r_numericSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageArithNumericImage(r_numeric, r_antsimage, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageArithImageImage
SEXP antsImageArithImageImage(SEXP r_antsimage1, SEXP r_antsimage2, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageArithImageImage(SEXP r_antsimage1SEXP, SEXP r_antsimage2SEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage1(r_antsimage1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage2(r_antsimage2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageArithImageImage(r_antsimage1, r_antsimage2, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageClone
SEXP AntsImageClone(SEXP r_in_image, SEXP r_out_pixeltype);
RcppExport SEXP _ANTsRCore_AntsImageClone(SEXP r_in_imageSEXP, SEXP r_out_pixeltypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image(r_in_imageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_out_pixeltype(r_out_pixeltypeSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageClone(r_in_image, r_out_pixeltype));
    return rcpp_result_gen;
END_RCPP
}
// antsImageComparisonImageNumeric
SEXP antsImageComparisonImageNumeric(SEXP r_antsimage, SEXP r_numeric, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageComparisonImageNumeric(SEXP r_antsimageSEXP, SEXP r_numericSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numeric(r_numericSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageComparisonImageNumeric(r_antsimage, r_numeric, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageComparisonImageImage
SEXP antsImageComparisonImageImage(SEXP r_antsimage1, SEXP r_antsimage2, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageComparisonImageImage(SEXP r_antsimage1SEXP, SEXP r_antsimage2SEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage1(r_antsimage1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage2(r_antsimage2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageComparisonImageImage(r_antsimage1, r_antsimage2, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageHeaderInfo
SEXP AntsImageHeaderInfo(SEXP r_filename);
RcppExport SEXP _ANTsRCore_AntsImageHeaderInfo(SEXP r_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_filename(r_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageHeaderInfo(r_filename));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageIterator
SEXP AntsImageIterator(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_AntsImageIterator(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageIterator(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_Get
SEXP antsImageIterator_Get(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_Get(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_Get(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_Set
SEXP antsImageIterator_Set(SEXP r_antsimageiterator, SEXP r_value);
RcppExport SEXP _ANTsRCore_antsImageIterator_Set(SEXP r_antsimageiteratorSEXP, SEXP r_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_value(r_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_Set(r_antsimageiterator, r_value));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_Next
SEXP antsImageIterator_Next(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_Next(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_Next(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_Previous
SEXP antsImageIterator_Previous(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_Previous(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_Previous(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_IsAtEnd
SEXP antsImageIterator_IsAtEnd(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_IsAtEnd(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_IsAtEnd(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_GoToBegin
SEXP antsImageIterator_GoToBegin(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_GoToBegin(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_GoToBegin(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_GetIndex
SEXP antsImageIterator_GetIndex(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_GetIndex(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_GetIndex(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_SetIndex
SEXP antsImageIterator_SetIndex(SEXP r_antsimageiterator, SEXP r_index);
RcppExport SEXP _ANTsRCore_antsImageIterator_SetIndex(SEXP r_antsimageiteratorSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_SetIndex(r_antsimageiterator, r_index));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_Remaining
SEXP antsImageIterator_Remaining(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_Remaining(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_Remaining(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_GoToReverseBegin
SEXP antsImageIterator_GoToReverseBegin(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_GoToReverseBegin(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_GoToReverseBegin(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageIterator_IsAtReverseEnd
SEXP antsImageIterator_IsAtReverseEnd(SEXP r_antsimageiterator);
RcppExport SEXP _ANTsRCore_antsImageIterator_IsAtReverseEnd(SEXP r_antsimageiteratorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimageiterator(r_antsimageiteratorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageIterator_IsAtReverseEnd(r_antsimageiterator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageLogicImageNumeric
SEXP antsImageLogicImageNumeric(SEXP r_antsimage, SEXP r_numeric, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageLogicImageNumeric(SEXP r_antsimageSEXP, SEXP r_numericSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numeric(r_numericSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageLogicImageNumeric(r_antsimage, r_numeric, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageLogicImageImage
SEXP antsImageLogicImageImage(SEXP r_antsimage1, SEXP r_antsimage2, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageLogicImageImage(SEXP r_antsimage1SEXP, SEXP r_antsimage2SEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage1(r_antsimage1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage2(r_antsimage2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageLogicImageImage(r_antsimage1, r_antsimage2, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageMath
SEXP antsImageMath(SEXP r_antsimage, SEXP r_operator);
RcppExport SEXP _ANTsRCore_antsImageMath(SEXP r_antsimageSEXP, SEXP r_operatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_operator(r_operatorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageMath(r_antsimage, r_operator));
    return rcpp_result_gen;
END_RCPP
}
// antsImageMutualInformation
SEXP antsImageMutualInformation(SEXP r_in_image1, SEXP r_in_image2);
RcppExport SEXP _ANTsRCore_antsImageMutualInformation(SEXP r_in_image1SEXP, SEXP r_in_image2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_in_image2(r_in_image2SEXP);
    rcpp_result_gen = Rcpp::wrap(antsImageMutualInformation(r_in_image1, r_in_image2));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageRead
SEXP AntsImageRead(SEXP r_filename, SEXP r_pixeltype, SEXP r_dimension, SEXP r_components);
RcppExport SEXP _ANTsRCore_AntsImageRead(SEXP r_filenameSEXP, SEXP r_pixeltypeSEXP, SEXP r_dimensionSEXP, SEXP r_componentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_filename(r_filenameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_pixeltype(r_pixeltypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_components(r_componentsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageRead(r_filename, r_pixeltype, r_dimension, r_components));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageStats
SEXP AntsImageStats(SEXP r_antsimage, SEXP r_mask, SEXP r_narm);
RcppExport SEXP _ANTsRCore_AntsImageStats(SEXP r_antsimageSEXP, SEXP r_maskSEXP, SEXP r_narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_narm(r_narmSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageStats(r_antsimage, r_mask, r_narm));
    return rcpp_result_gen;
END_RCPP
}
// AntsImageWrite
SEXP AntsImageWrite(SEXP r_img, SEXP r_filename, SEXP r_asTensor);
RcppExport SEXP _ANTsRCore_AntsImageWrite(SEXP r_imgSEXP, SEXP r_filenameSEXP, SEXP r_asTensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_img(r_imgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_filename(r_filenameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_asTensor(r_asTensorSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsImageWrite(r_img, r_filename, r_asTensor));
    return rcpp_result_gen;
END_RCPP
}
// antsJointFusion
SEXP antsJointFusion(SEXP r_args);
RcppExport SEXP _ANTsRCore_antsJointFusion(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(antsJointFusion(r_args));
    return rcpp_result_gen;
END_RCPP
}
// antsMatrix
SEXP antsMatrix(SEXP r_elementtype);
RcppExport SEXP _ANTsRCore_antsMatrix(SEXP r_elementtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_elementtype(r_elementtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(antsMatrix(r_elementtype));
    return rcpp_result_gen;
END_RCPP
}
// antsMatrix_asList
SEXP antsMatrix_asList(SEXP r_antsmatrix);
RcppExport SEXP _ANTsRCore_antsMatrix_asList(SEXP r_antsmatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsmatrix(r_antsmatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(antsMatrix_asList(r_antsmatrix));
    return rcpp_result_gen;
END_RCPP
}
// antsMatrix_asantsMatrix
SEXP antsMatrix_asantsMatrix(SEXP r_list, SEXP r_elementtype);
RcppExport SEXP _ANTsRCore_antsMatrix_asantsMatrix(SEXP r_listSEXP, SEXP r_elementtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_list(r_listSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_elementtype(r_elementtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(antsMatrix_asantsMatrix(r_list, r_elementtype));
    return rcpp_result_gen;
END_RCPP
}
// AntsMotionCorr
SEXP AntsMotionCorr(SEXP r_args);
RcppExport SEXP _ANTsRCore_AntsMotionCorr(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsMotionCorr(r_args));
    return rcpp_result_gen;
END_RCPP
}
// antsMotionCorrStats
SEXP antsMotionCorrStats(SEXP r_tsimg, SEXP r_mask, SEXP r_moco, SEXP r_stupidoffset);
RcppExport SEXP _ANTsRCore_antsMotionCorrStats(SEXP r_tsimgSEXP, SEXP r_maskSEXP, SEXP r_mocoSEXP, SEXP r_stupidoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_tsimg(r_tsimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_moco(r_mocoSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_stupidoffset(r_stupidoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(antsMotionCorrStats(r_tsimg, r_mask, r_moco, r_stupidoffset));
    return rcpp_result_gen;
END_RCPP
}
// AntsRegistration
SEXP AntsRegistration(SEXP r_args);
RcppExport SEXP _ANTsRCore_AntsRegistration(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(AntsRegistration(r_args));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric
SEXP antsrMetric(SEXP r_pixeltype, SEXP r_dimension, SEXP r_type, SEXP r_isVector, SEXP r_fixed, SEXP r_moving);
RcppExport SEXP _ANTsRCore_antsrMetric(SEXP r_pixeltypeSEXP, SEXP r_dimensionSEXP, SEXP r_typeSEXP, SEXP r_isVectorSEXP, SEXP r_fixedSEXP, SEXP r_movingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_pixeltype(r_pixeltypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_type(r_typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isVector(r_isVectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_fixed(r_fixedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_moving(r_movingSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric(r_pixeltype, r_dimension, r_type, r_isVector, r_fixed, r_moving));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_SetImage
SEXP antsrMetric_SetImage(SEXP r_metric, SEXP r_antsimage, SEXP r_isFixed, SEXP r_isMask);
RcppExport SEXP _ANTsRCore_antsrMetric_SetImage(SEXP r_metricSEXP, SEXP r_antsimageSEXP, SEXP r_isFixedSEXP, SEXP r_isMaskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isFixed(r_isFixedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isMask(r_isMaskSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_SetImage(r_metric, r_antsimage, r_isFixed, r_isMask));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_SetTransform
SEXP antsrMetric_SetTransform(SEXP r_metric, SEXP r_antsrtransform, SEXP r_isFixed);
RcppExport SEXP _ANTsRCore_antsrMetric_SetTransform(SEXP r_metricSEXP, SEXP r_antsrtransformSEXP, SEXP r_isFixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_antsrtransform(r_antsrtransformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_isFixed(r_isFixedSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_SetTransform(r_metric, r_antsrtransform, r_isFixed));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_GetValue
SEXP antsrMetric_GetValue(SEXP r_metric);
RcppExport SEXP _ANTsRCore_antsrMetric_GetValue(SEXP r_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_GetValue(r_metric));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_GetDerivative
SEXP antsrMetric_GetDerivative(SEXP r_metric);
RcppExport SEXP _ANTsRCore_antsrMetric_GetDerivative(SEXP r_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_GetDerivative(r_metric));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_SetSampling
SEXP antsrMetric_SetSampling(SEXP r_metric, SEXP r_strategy, SEXP r_percentage);
RcppExport SEXP _ANTsRCore_antsrMetric_SetSampling(SEXP r_metricSEXP, SEXP r_strategySEXP, SEXP r_percentageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_strategy(r_strategySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_percentage(r_percentageSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_SetSampling(r_metric, r_strategy, r_percentage));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_SetNumberOfHistogramBins
SEXP antsrMetric_SetNumberOfHistogramBins(SEXP r_metric, SEXP r_nBins);
RcppExport SEXP _ANTsRCore_antsrMetric_SetNumberOfHistogramBins(SEXP r_metricSEXP, SEXP r_nBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_nBins(r_nBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_SetNumberOfHistogramBins(r_metric, r_nBins));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_SetRadius
SEXP antsrMetric_SetRadius(SEXP r_metric, SEXP r_radius);
RcppExport SEXP _ANTsRCore_antsrMetric_SetRadius(SEXP r_metricSEXP, SEXP r_radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_radius(r_radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_SetRadius(r_metric, r_radius));
    return rcpp_result_gen;
END_RCPP
}
// antsrMetric_Initialize
SEXP antsrMetric_Initialize(SEXP r_metric);
RcppExport SEXP _ANTsRCore_antsrMetric_Initialize(SEXP r_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_metric(r_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrMetric_Initialize(r_metric));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform
SEXP antsrTransform(SEXP r_precision, SEXP r_dimension, SEXP r_type);
RcppExport SEXP _ANTsRCore_antsrTransform(SEXP r_precisionSEXP, SEXP r_dimensionSEXP, SEXP r_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_precision(r_precisionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_type(r_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform(r_precision, r_dimension, r_type));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_MatrixOffset
SEXP antsrTransform_MatrixOffset(SEXP r_type, SEXP r_precision, SEXP r_dimension, SEXP r_matrix, SEXP r_offset, SEXP r_center, SEXP r_translation, SEXP r_parameters, SEXP r_fixedparameters);
RcppExport SEXP _ANTsRCore_antsrTransform_MatrixOffset(SEXP r_typeSEXP, SEXP r_precisionSEXP, SEXP r_dimensionSEXP, SEXP r_matrixSEXP, SEXP r_offsetSEXP, SEXP r_centerSEXP, SEXP r_translationSEXP, SEXP r_parametersSEXP, SEXP r_fixedparametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_type(r_typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_precision(r_precisionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_matrix(r_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_offset(r_offsetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_center(r_centerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_translation(r_translationSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parameters(r_parametersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_fixedparameters(r_fixedparametersSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_MatrixOffset(r_type, r_precision, r_dimension, r_matrix, r_offset, r_center, r_translation, r_parameters, r_fixedparameters));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_GetParameters
SEXP antsrTransform_GetParameters(SEXP r_transform);
RcppExport SEXP _ANTsRCore_antsrTransform_GetParameters(SEXP r_transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_GetParameters(r_transform));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_SetParameters
SEXP antsrTransform_SetParameters(SEXP r_transform, SEXP r_parameters);
RcppExport SEXP _ANTsRCore_antsrTransform_SetParameters(SEXP r_transformSEXP, SEXP r_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parameters(r_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_SetParameters(r_transform, r_parameters));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_GetFixedParameters
SEXP antsrTransform_GetFixedParameters(SEXP r_transform);
RcppExport SEXP _ANTsRCore_antsrTransform_GetFixedParameters(SEXP r_transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_GetFixedParameters(r_transform));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_SetFixedParameters
SEXP antsrTransform_SetFixedParameters(SEXP r_transform, SEXP r_parameters);
RcppExport SEXP _ANTsRCore_antsrTransform_SetFixedParameters(SEXP r_transformSEXP, SEXP r_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_parameters(r_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_SetFixedParameters(r_transform, r_parameters));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_TransformPoint
SEXP antsrTransform_TransformPoint(SEXP r_transform, SEXP r_point);
RcppExport SEXP _ANTsRCore_antsrTransform_TransformPoint(SEXP r_transformSEXP, SEXP r_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_point(r_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_TransformPoint(r_transform, r_point));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_TransformVector
SEXP antsrTransform_TransformVector(SEXP r_transform, SEXP r_vector);
RcppExport SEXP _ANTsRCore_antsrTransform_TransformVector(SEXP r_transformSEXP, SEXP r_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_vector(r_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_TransformVector(r_transform, r_vector));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_TransformImage
SEXP antsrTransform_TransformImage(SEXP r_transform, SEXP r_image, SEXP r_ref, SEXP r_iterpolation);
RcppExport SEXP _ANTsRCore_antsrTransform_TransformImage(SEXP r_transformSEXP, SEXP r_imageSEXP, SEXP r_refSEXP, SEXP r_iterpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_image(r_imageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_ref(r_refSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_iterpolation(r_iterpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_TransformImage(r_transform, r_image, r_ref, r_iterpolation));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_Read
SEXP antsrTransform_Read(SEXP r_filename, SEXP r_dimension, SEXP r_precision);
RcppExport SEXP _ANTsRCore_antsrTransform_Read(SEXP r_filenameSEXP, SEXP r_dimensionSEXP, SEXP r_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_filename(r_filenameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_precision(r_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_Read(r_filename, r_dimension, r_precision));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_Compose
SEXP antsrTransform_Compose(SEXP r_list, SEXP r_dimension, SEXP r_precision);
RcppExport SEXP _ANTsRCore_antsrTransform_Compose(SEXP r_listSEXP, SEXP r_dimensionSEXP, SEXP r_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_list(r_listSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dimension(r_dimensionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_precision(r_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_Compose(r_list, r_dimension, r_precision));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_FromDisplacementField
SEXP antsrTransform_FromDisplacementField(SEXP r_field);
RcppExport SEXP _ANTsRCore_antsrTransform_FromDisplacementField(SEXP r_fieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_field(r_fieldSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_FromDisplacementField(r_field));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_ToDisplacementField
SEXP antsrTransform_ToDisplacementField(SEXP r_tx, SEXP r_ref);
RcppExport SEXP _ANTsRCore_antsrTransform_ToDisplacementField(SEXP r_txSEXP, SEXP r_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_tx(r_txSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_ref(r_refSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_ToDisplacementField(r_tx, r_ref));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_Inverse
SEXP antsrTransform_Inverse(SEXP r_transform);
RcppExport SEXP _ANTsRCore_antsrTransform_Inverse(SEXP r_transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_Inverse(r_transform));
    return rcpp_result_gen;
END_RCPP
}
// antsrTransform_Write
SEXP antsrTransform_Write(SEXP r_transform, SEXP filename_);
RcppExport SEXP _ANTsRCore_antsrTransform_Write(SEXP r_transformSEXP, SEXP filename_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_transform(r_transformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type filename_(filename_SEXP);
    rcpp_result_gen = Rcpp::wrap(antsrTransform_Write(r_transform, filename_));
    return rcpp_result_gen;
END_RCPP
}
// CropImage
SEXP CropImage(SEXP r_in_image1, SEXP r_in_image2, SEXP r_label, SEXP r_decrop, SEXP r_loind, SEXP r_upind);
RcppExport SEXP _ANTsRCore_CropImage(SEXP r_in_image1SEXP, SEXP r_in_image2SEXP, SEXP r_labelSEXP, SEXP r_decropSEXP, SEXP r_loindSEXP, SEXP r_upindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_in_image2(r_in_image2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_label(r_labelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_decrop(r_decropSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_loind(r_loindSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_upind(r_upindSEXP);
    rcpp_result_gen = Rcpp::wrap(CropImage(r_in_image1, r_in_image2, r_label, r_decrop, r_loind, r_upind));
    return rcpp_result_gen;
END_RCPP
}
// ExtractSlice
SEXP ExtractSlice(SEXP r_in_image1, SEXP r_slice, SEXP r_direction, SEXP r_collapseStrategy);
RcppExport SEXP _ANTsRCore_ExtractSlice(SEXP r_in_image1SEXP, SEXP r_sliceSEXP, SEXP r_directionSEXP, SEXP r_collapseStrategySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_slice(r_sliceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_collapseStrategy(r_collapseStrategySEXP);
    rcpp_result_gen = Rcpp::wrap(ExtractSlice(r_in_image1, r_slice, r_direction, r_collapseStrategy));
    return rcpp_result_gen;
END_RCPP
}
// fastMarchingExtension
SEXP fastMarchingExtension(SEXP r_speedImage, SEXP r_labelImage, SEXP r_valueImage);
RcppExport SEXP _ANTsRCore_fastMarchingExtension(SEXP r_speedImageSEXP, SEXP r_labelImageSEXP, SEXP r_valueImageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_speedImage(r_speedImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_labelImage(r_labelImageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_valueImage(r_valueImageSEXP);
    rcpp_result_gen = Rcpp::wrap(fastMarchingExtension(r_speedImage, r_labelImage, r_valueImage));
    return rcpp_result_gen;
END_RCPP
}
// fsl2antsrTransformR
SEXP fsl2antsrTransformR(SEXP r_matrix, SEXP r_reference, SEXP r_moving, SEXP r_flag);
RcppExport SEXP _ANTsRCore_fsl2antsrTransformR(SEXP r_matrixSEXP, SEXP r_referenceSEXP, SEXP r_movingSEXP, SEXP r_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_matrix(r_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_reference(r_referenceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_moving(r_movingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_flag(r_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(fsl2antsrTransformR(r_matrix, r_reference, r_moving, r_flag));
    return rcpp_result_gen;
END_RCPP
}
// iMathInterface
SEXP iMathInterface(SEXP r_args);
RcppExport SEXP _ANTsRCore_iMathInterface(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(iMathInterface(r_args));
    return rcpp_result_gen;
END_RCPP
}
// iMathInterface1
SEXP iMathInterface1(SEXP r_args);
RcppExport SEXP _ANTsRCore_iMathInterface1(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(iMathInterface1(r_args));
    return rcpp_result_gen;
END_RCPP
}
// iMathInterface2
SEXP iMathInterface2(SEXP r_args);
RcppExport SEXP _ANTsRCore_iMathInterface2(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(iMathInterface2(r_args));
    return rcpp_result_gen;
END_RCPP
}
// imagesToMatrixR
SEXP imagesToMatrixR(SEXP r_fns, SEXP r_mask, SEXP r_n);
RcppExport SEXP _ANTsRCore_imagesToMatrixR(SEXP r_fnsSEXP, SEXP r_maskSEXP, SEXP r_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_fns(r_fnsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_n(r_nSEXP);
    rcpp_result_gen = Rcpp::wrap(imagesToMatrixR(r_fns, r_mask, r_n));
    return rcpp_result_gen;
END_RCPP
}
// invariantImageSimilarity
SEXP invariantImageSimilarity(SEXP r_in_image1, SEXP r_in_image2, SEXP thetas, SEXP thetas2, SEXP thetas3, SEXP localSearchIterations, SEXP whichMetric, SEXP r_scale, SEXP r_doref, SEXP txfn, SEXP whichTransform, SEXP r_mask);
RcppExport SEXP _ANTsRCore_invariantImageSimilarity(SEXP r_in_image1SEXP, SEXP r_in_image2SEXP, SEXP thetasSEXP, SEXP thetas2SEXP, SEXP thetas3SEXP, SEXP localSearchIterationsSEXP, SEXP whichMetricSEXP, SEXP r_scaleSEXP, SEXP r_dorefSEXP, SEXP txfnSEXP, SEXP whichTransformSEXP, SEXP r_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_in_image2(r_in_image2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type thetas2(thetas2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type thetas3(thetas3SEXP);
    Rcpp::traits::input_parameter< SEXP >::type localSearchIterations(localSearchIterationsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type whichMetric(whichMetricSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_scale(r_scaleSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_doref(r_dorefSEXP);
    Rcpp::traits::input_parameter< SEXP >::type txfn(txfnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type whichTransform(whichTransformSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(invariantImageSimilarity(r_in_image1, r_in_image2, thetas, thetas2, thetas3, localSearchIterations, whichMetric, r_scale, r_doref, txfn, whichTransform, r_mask));
    return rcpp_result_gen;
END_RCPP
}
// itkConvolveImage
SEXP itkConvolveImage(SEXP r_in_image1, SEXP r_in_image2);
RcppExport SEXP _ANTsRCore_itkConvolveImage(SEXP r_in_image1SEXP, SEXP r_in_image2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_in_image2(r_in_image2SEXP);
    rcpp_result_gen = Rcpp::wrap(itkConvolveImage(r_in_image1, r_in_image2));
    return rcpp_result_gen;
END_RCPP
}
// labelStatsR
SEXP labelStatsR(SEXP r_image, SEXP r_labelImage);
RcppExport SEXP _ANTsRCore_labelStatsR(SEXP r_imageSEXP, SEXP r_labelImageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_image(r_imageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_labelImage(r_labelImageSEXP);
    rcpp_result_gen = Rcpp::wrap(labelStatsR(r_image, r_labelImage));
    return rcpp_result_gen;
END_RCPP
}
// makeImageR
SEXP makeImageR(SEXP r_pixeltype, SEXP r_size, SEXP r_spacing, SEXP r_origin, SEXP r_direction, SEXP r_components);
RcppExport SEXP _ANTsRCore_makeImageR(SEXP r_pixeltypeSEXP, SEXP r_sizeSEXP, SEXP r_spacingSEXP, SEXP r_originSEXP, SEXP r_directionSEXP, SEXP r_componentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_pixeltype(r_pixeltypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_size(r_sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_spacing(r_spacingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_origin(r_originSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_direction(r_directionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_components(r_componentsSEXP);
    rcpp_result_gen = Rcpp::wrap(makeImageR(r_pixeltype, r_size, r_spacing, r_origin, r_direction, r_components));
    return rcpp_result_gen;
END_RCPP
}
// mergeChannelsR
SEXP mergeChannelsR(SEXP r_imageList);
RcppExport SEXP _ANTsRCore_mergeChannelsR(SEXP r_imageListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_imageList(r_imageListSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeChannelsR(r_imageList));
    return rcpp_result_gen;
END_RCPP
}
// blobAnalysis
SEXP blobAnalysis(SEXP r_inimg, SEXP r_outimg, SEXP r_numberOfBlobsToExtract, SEXP r_minScale, SEXP r_maxScale, SEXP r_stepsPerOctave);
RcppExport SEXP _ANTsRCore_blobAnalysis(SEXP r_inimgSEXP, SEXP r_outimgSEXP, SEXP r_numberOfBlobsToExtractSEXP, SEXP r_minScaleSEXP, SEXP r_maxScaleSEXP, SEXP r_stepsPerOctaveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inimg(r_inimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_outimg(r_outimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_numberOfBlobsToExtract(r_numberOfBlobsToExtractSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_minScale(r_minScaleSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maxScale(r_maxScaleSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_stepsPerOctave(r_stepsPerOctaveSEXP);
    rcpp_result_gen = Rcpp::wrap(blobAnalysis(r_inimg, r_outimg, r_numberOfBlobsToExtract, r_minScale, r_maxScale, r_stepsPerOctave));
    return rcpp_result_gen;
END_RCPP
}
// patchAnalysis
SEXP patchAnalysis(SEXP r_inimg, SEXP r_maskimg, SEXP r_outimg, SEXP r_patchRadius, SEXP r_patchSamples, SEXP r_patchVar, SEXP r_meanCenter, SEXP r_canonicalFrame, SEXP r_evecBasis, SEXP r_rotInvar, SEXP r_doProj, SEXP r_verbose);
RcppExport SEXP _ANTsRCore_patchAnalysis(SEXP r_inimgSEXP, SEXP r_maskimgSEXP, SEXP r_outimgSEXP, SEXP r_patchRadiusSEXP, SEXP r_patchSamplesSEXP, SEXP r_patchVarSEXP, SEXP r_meanCenterSEXP, SEXP r_canonicalFrameSEXP, SEXP r_evecBasisSEXP, SEXP r_rotInvarSEXP, SEXP r_doProjSEXP, SEXP r_verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inimg(r_inimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maskimg(r_maskimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_outimg(r_outimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_patchRadius(r_patchRadiusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_patchSamples(r_patchSamplesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_patchVar(r_patchVarSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_meanCenter(r_meanCenterSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_canonicalFrame(r_canonicalFrameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_evecBasis(r_evecBasisSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_rotInvar(r_rotInvarSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_doProj(r_doProjSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_verbose(r_verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(patchAnalysis(r_inimg, r_maskimg, r_outimg, r_patchRadius, r_patchSamples, r_patchVar, r_meanCenter, r_canonicalFrame, r_evecBasis, r_rotInvar, r_doProj, r_verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world22
List rcpp_hello_world22();
RcppExport SEXP _ANTsRCore_rcpp_hello_world22() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world22());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world33
List rcpp_hello_world33();
RcppExport SEXP _ANTsRCore_rcpp_hello_world33() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world33());
    return rcpp_result_gen;
END_RCPP
}
// reflectionMatrixR
SEXP reflectionMatrixR(SEXP r_image, SEXP r_axis, SEXP r_filename);
RcppExport SEXP _ANTsRCore_reflectionMatrixR(SEXP r_imageSEXP, SEXP r_axisSEXP, SEXP r_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_image(r_imageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_axis(r_axisSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_filename(r_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(reflectionMatrixR(r_image, r_axis, r_filename));
    return rcpp_result_gen;
END_RCPP
}
// reorientImageR
SEXP reorientImageR(SEXP r_in_image1, SEXP r_txfn, SEXP r_axis1, SEXP r_axis2, SEXP rrfl, SEXP rscl);
RcppExport SEXP _ANTsRCore_reorientImageR(SEXP r_in_image1SEXP, SEXP r_txfnSEXP, SEXP r_axis1SEXP, SEXP r_axis2SEXP, SEXP rrflSEXP, SEXP rsclSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_txfn(r_txfnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_axis1(r_axis1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_axis2(r_axis2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type rrfl(rrflSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rscl(rsclSEXP);
    rcpp_result_gen = Rcpp::wrap(reorientImageR(r_in_image1, r_txfn, r_axis1, r_axis2, rrfl, rscl));
    return rcpp_result_gen;
END_RCPP
}
// centerOfMass
SEXP centerOfMass(SEXP r_in_image1);
RcppExport SEXP _ANTsRCore_centerOfMass(SEXP r_in_image1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_in_image1(r_in_image1SEXP);
    rcpp_result_gen = Rcpp::wrap(centerOfMass(r_in_image1));
    return rcpp_result_gen;
END_RCPP
}
// sccanX
SEXP sccanX(SEXP r_args);
RcppExport SEXP _ANTsRCore_sccanX(SEXP r_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_args(r_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(sccanX(r_args));
    return rcpp_result_gen;
END_RCPP
}
// robustMatrixTransform
SEXP robustMatrixTransform(SEXP r_matrix);
RcppExport SEXP _ANTsRCore_robustMatrixTransform(SEXP r_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_matrix(r_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(robustMatrixTransform(r_matrix));
    return rcpp_result_gen;
END_RCPP
}
// eigenanatomyCpp
SEXP eigenanatomyCpp(SEXP r_X, SEXP r_mask, SEXP r_sparseness, SEXP r_nvecs, SEXP r_its, SEXP r_cthresh, SEXP r_z, SEXP r_smooth, SEXP r_initializationList, SEXP r_mycoption, SEXP r_ell1, SEXP r_verbose, SEXP r_powerit, SEXP r_priorWeight, SEXP r_maxBasedThresh);
RcppExport SEXP _ANTsRCore_eigenanatomyCpp(SEXP r_XSEXP, SEXP r_maskSEXP, SEXP r_sparsenessSEXP, SEXP r_nvecsSEXP, SEXP r_itsSEXP, SEXP r_cthreshSEXP, SEXP r_zSEXP, SEXP r_smoothSEXP, SEXP r_initializationListSEXP, SEXP r_mycoptionSEXP, SEXP r_ell1SEXP, SEXP r_verboseSEXP, SEXP r_poweritSEXP, SEXP r_priorWeightSEXP, SEXP r_maxBasedThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_X(r_XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mask(r_maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sparseness(r_sparsenessSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_nvecs(r_nvecsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_its(r_itsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_cthresh(r_cthreshSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_z(r_zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_smooth(r_smoothSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_initializationList(r_initializationListSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mycoption(r_mycoptionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_ell1(r_ell1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_verbose(r_verboseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_powerit(r_poweritSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_priorWeight(r_priorWeightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maxBasedThresh(r_maxBasedThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenanatomyCpp(r_X, r_mask, r_sparseness, r_nvecs, r_its, r_cthresh, r_z, r_smooth, r_initializationList, r_mycoption, r_ell1, r_verbose, r_powerit, r_priorWeight, r_maxBasedThresh));
    return rcpp_result_gen;
END_RCPP
}
// sccanCpp
SEXP sccanCpp(SEXP r_X, SEXP r_Y, SEXP r_maskx, SEXP r_masky, SEXP r_sparsenessx, SEXP r_sparsenessy, SEXP r_nvecs, SEXP r_its, SEXP r_cthreshx, SEXP r_cthreshy, SEXP r_z, SEXP r_smooth, SEXP r_initializationListx, SEXP r_initializationListy, SEXP r_mycoption, SEXP r_ell1, SEXP r_verbose, SEXP r_priorWeight, SEXP r_maxBasedThresh);
RcppExport SEXP _ANTsRCore_sccanCpp(SEXP r_XSEXP, SEXP r_YSEXP, SEXP r_maskxSEXP, SEXP r_maskySEXP, SEXP r_sparsenessxSEXP, SEXP r_sparsenessySEXP, SEXP r_nvecsSEXP, SEXP r_itsSEXP, SEXP r_cthreshxSEXP, SEXP r_cthreshySEXP, SEXP r_zSEXP, SEXP r_smoothSEXP, SEXP r_initializationListxSEXP, SEXP r_initializationListySEXP, SEXP r_mycoptionSEXP, SEXP r_ell1SEXP, SEXP r_verboseSEXP, SEXP r_priorWeightSEXP, SEXP r_maxBasedThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_X(r_XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_Y(r_YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maskx(r_maskxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_masky(r_maskySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sparsenessx(r_sparsenessxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sparsenessy(r_sparsenessySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_nvecs(r_nvecsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_its(r_itsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_cthreshx(r_cthreshxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_cthreshy(r_cthreshySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_z(r_zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_smooth(r_smoothSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_initializationListx(r_initializationListxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_initializationListy(r_initializationListySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mycoption(r_mycoptionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_ell1(r_ell1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_verbose(r_verboseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_priorWeight(r_priorWeightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_maxBasedThresh(r_maxBasedThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(sccanCpp(r_X, r_Y, r_maskx, r_masky, r_sparsenessx, r_sparsenessy, r_nvecs, r_its, r_cthreshx, r_cthreshy, r_z, r_smooth, r_initializationListx, r_initializationListy, r_mycoption, r_ell1, r_verbose, r_priorWeight, r_maxBasedThresh));
    return rcpp_result_gen;
END_RCPP
}
// smoothImageR
SEXP smoothImageR(SEXP r_inimg, SEXP r_outimg, SEXP r_sigma, SEXP sigmaInPhysicalCoordinates, SEXP r_kernelwidth);
RcppExport SEXP _ANTsRCore_smoothImageR(SEXP r_inimgSEXP, SEXP r_outimgSEXP, SEXP r_sigmaSEXP, SEXP sigmaInPhysicalCoordinatesSEXP, SEXP r_kernelwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_inimg(r_inimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_outimg(r_outimgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sigma(r_sigmaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigmaInPhysicalCoordinates(sigmaInPhysicalCoordinatesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_kernelwidth(r_kernelwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothImageR(r_inimg, r_outimg, r_sigma, sigmaInPhysicalCoordinates, r_kernelwidth));
    return rcpp_result_gen;
END_RCPP
}
// splitChannelsR
SEXP splitChannelsR(SEXP r_antsimage);
RcppExport SEXP _ANTsRCore_splitChannelsR(SEXP r_antsimageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    rcpp_result_gen = Rcpp::wrap(splitChannelsR(r_antsimage));
    return rcpp_result_gen;
END_RCPP
}
// timeSeriesSubtraction
SEXP timeSeriesSubtraction(SEXP r_antsimage, SEXP method);
RcppExport SEXP _ANTsRCore_timeSeriesSubtraction(SEXP r_antsimageSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(timeSeriesSubtraction(r_antsimage, method));
    return rcpp_result_gen;
END_RCPP
}
// weingartenImageCurvatureR
SEXP weingartenImageCurvatureR(SEXP r_antsimage, SEXP r_sigma, SEXP r_opt, SEXP r_labeled);
RcppExport SEXP _ANTsRCore_weingartenImageCurvatureR(SEXP r_antsimageSEXP, SEXP r_sigmaSEXP, SEXP r_optSEXP, SEXP r_labeledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r_antsimage(r_antsimageSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sigma(r_sigmaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_opt(r_optSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_labeled(r_labeledSEXP);
    rcpp_result_gen = Rcpp::wrap(weingartenImageCurvatureR(r_antsimage, r_sigma, r_opt, r_labeled));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ANTsRCore_ANTSIntegrateVectorField", (DL_FUNC) &_ANTsRCore_ANTSIntegrateVectorField, 6},
    {"_ANTsRCore_addNoiseToImageR", (DL_FUNC) &_ANTsRCore_addNoiseToImageR, 3},
    {"_ANTsRCore_Atropos", (DL_FUNC) &_ANTsRCore_Atropos, 1},
    {"_ANTsRCore_createJacobianDeterminantImageR", (DL_FUNC) &_ANTsRCore_createJacobianDeterminantImageR, 4},
    {"_ANTsRCore_DenoiseImage", (DL_FUNC) &_ANTsRCore_DenoiseImage, 1},
    {"_ANTsRCore_fitBsplineDisplacementFieldR", (DL_FUNC) &_ANTsRCore_fitBsplineDisplacementFieldR, 16},
    {"_ANTsRCore_fitBsplineObjectToScatteredDataR", (DL_FUNC) &_ANTsRCore_fitBsplineObjectToScatteredDataR, 10},
    {"_ANTsRCore_fitThinPlateSplineDisplacementFieldR", (DL_FUNC) &_ANTsRCore_fitThinPlateSplineDisplacementFieldR, 7},
    {"_ANTsRCore_HausdorffDistanceR", (DL_FUNC) &_ANTsRCore_HausdorffDistanceR, 2},
    {"_ANTsRCore_hessianObjectnessR", (DL_FUNC) &_ANTsRCore_hessianObjectnessR, 11},
    {"_ANTsRCore_histogramMatchImageR", (DL_FUNC) &_ANTsRCore_histogramMatchImageR, 5},
    {"_ANTsRCore_integrateVelocityFieldR", (DL_FUNC) &_ANTsRCore_integrateVelocityFieldR, 5},
    {"_ANTsRCore_invertDisplacementFieldR", (DL_FUNC) &_ANTsRCore_invertDisplacementFieldR, 7},
    {"_ANTsRCore_KellyKapowski", (DL_FUNC) &_ANTsRCore_KellyKapowski, 1},
    {"_ANTsRCore_LabelClustersUniquely", (DL_FUNC) &_ANTsRCore_LabelClustersUniquely, 1},
    {"_ANTsRCore_LabelGeometryMeasures", (DL_FUNC) &_ANTsRCore_LabelGeometryMeasures, 1},
    {"_ANTsRCore_labelOverlapMeasuresR", (DL_FUNC) &_ANTsRCore_labelOverlapMeasuresR, 2},
    {"_ANTsRCore_N3BiasFieldCorrection", (DL_FUNC) &_ANTsRCore_N3BiasFieldCorrection, 1},
    {"_ANTsRCore_N4BiasFieldCorrection", (DL_FUNC) &_ANTsRCore_N4BiasFieldCorrection, 1},
    {"_ANTsRCore_simulateBSplineDisplacementFieldR", (DL_FUNC) &_ANTsRCore_simulateBSplineDisplacementFieldR, 6},
    {"_ANTsRCore_simulateExponentialDisplacementFieldR", (DL_FUNC) &_ANTsRCore_simulateExponentialDisplacementFieldR, 5},
    {"_ANTsRCore_ThresholdImage", (DL_FUNC) &_ANTsRCore_ThresholdImage, 1},
    {"_ANTsRCore_AntsAffineInitializer", (DL_FUNC) &_ANTsRCore_AntsAffineInitializer, 1},
    {"_ANTsRCore_AntsApplyTransforms", (DL_FUNC) &_ANTsRCore_AntsApplyTransforms, 1},
    {"_ANTsRCore_AntsApplyTransformsToPoints", (DL_FUNC) &_ANTsRCore_AntsApplyTransformsToPoints, 1},
    {"_ANTsRCore_antsImage", (DL_FUNC) &_ANTsRCore_antsImage, 3},
    {"_ANTsRCore_antsImageArith", (DL_FUNC) &_ANTsRCore_antsImageArith, 3},
    {"_ANTsRCore_antsImage_isna", (DL_FUNC) &_ANTsRCore_antsImage_isna, 1},
    {"_ANTsRCore_antsImage_dim", (DL_FUNC) &_ANTsRCore_antsImage_dim, 1},
    {"_ANTsRCore_antsImage_asVector", (DL_FUNC) &_ANTsRCore_antsImage_asVector, 3},
    {"_ANTsRCore_antsImage_GetNeighborhoodMatrix", (DL_FUNC) &_ANTsRCore_antsImage_GetNeighborhoodMatrix, 7},
    {"_ANTsRCore_antsImage_GetNeighborhood", (DL_FUNC) &_ANTsRCore_antsImage_GetNeighborhood, 5},
    {"_ANTsRCore_antsImage_GetPixels", (DL_FUNC) &_ANTsRCore_antsImage_GetPixels, 2},
    {"_ANTsRCore_antsImage_SetPixels", (DL_FUNC) &_ANTsRCore_antsImage_SetPixels, 3},
    {"_ANTsRCore_antsImage_GetSpacing", (DL_FUNC) &_ANTsRCore_antsImage_GetSpacing, 1},
    {"_ANTsRCore_antsImage_SetSpacing", (DL_FUNC) &_ANTsRCore_antsImage_SetSpacing, 2},
    {"_ANTsRCore_antsImage_GetOrigin", (DL_FUNC) &_ANTsRCore_antsImage_GetOrigin, 1},
    {"_ANTsRCore_antsImage_SetOrigin", (DL_FUNC) &_ANTsRCore_antsImage_SetOrigin, 2},
    {"_ANTsRCore_antsImage_GetDirection", (DL_FUNC) &_ANTsRCore_antsImage_GetDirection, 1},
    {"_ANTsRCore_antsImage_SetDirection", (DL_FUNC) &_ANTsRCore_antsImage_SetDirection, 2},
    {"_ANTsRCore_antsImage_TransformIndexToPhysicalPoint", (DL_FUNC) &_ANTsRCore_antsImage_TransformIndexToPhysicalPoint, 2},
    {"_ANTsRCore_antsImage_TransformPhysicalPointToIndex", (DL_FUNC) &_ANTsRCore_antsImage_TransformPhysicalPointToIndex, 2},
    {"_ANTsRCore_antsImage_SetRegion", (DL_FUNC) &_ANTsRCore_antsImage_SetRegion, 4},
    {"_ANTsRCore_antsImage_SetByImage", (DL_FUNC) &_ANTsRCore_antsImage_SetByImage, 3},
    {"_ANTsRCore_antsImage_asantsImage", (DL_FUNC) &_ANTsRCore_antsImage_asantsImage, 6},
    {"_ANTsRCore_antsImage_RelationalOperators", (DL_FUNC) &_ANTsRCore_antsImage_RelationalOperators, 4},
    {"_ANTsRCore_antsImageArithImageNumeric", (DL_FUNC) &_ANTsRCore_antsImageArithImageNumeric, 3},
    {"_ANTsRCore_antsImageArithNumericImage", (DL_FUNC) &_ANTsRCore_antsImageArithNumericImage, 3},
    {"_ANTsRCore_antsImageArithImageImage", (DL_FUNC) &_ANTsRCore_antsImageArithImageImage, 3},
    {"_ANTsRCore_AntsImageClone", (DL_FUNC) &_ANTsRCore_AntsImageClone, 2},
    {"_ANTsRCore_antsImageComparisonImageNumeric", (DL_FUNC) &_ANTsRCore_antsImageComparisonImageNumeric, 3},
    {"_ANTsRCore_antsImageComparisonImageImage", (DL_FUNC) &_ANTsRCore_antsImageComparisonImageImage, 3},
    {"_ANTsRCore_AntsImageHeaderInfo", (DL_FUNC) &_ANTsRCore_AntsImageHeaderInfo, 1},
    {"_ANTsRCore_AntsImageIterator", (DL_FUNC) &_ANTsRCore_AntsImageIterator, 1},
    {"_ANTsRCore_antsImageIterator_Get", (DL_FUNC) &_ANTsRCore_antsImageIterator_Get, 1},
    {"_ANTsRCore_antsImageIterator_Set", (DL_FUNC) &_ANTsRCore_antsImageIterator_Set, 2},
    {"_ANTsRCore_antsImageIterator_Next", (DL_FUNC) &_ANTsRCore_antsImageIterator_Next, 1},
    {"_ANTsRCore_antsImageIterator_Previous", (DL_FUNC) &_ANTsRCore_antsImageIterator_Previous, 1},
    {"_ANTsRCore_antsImageIterator_IsAtEnd", (DL_FUNC) &_ANTsRCore_antsImageIterator_IsAtEnd, 1},
    {"_ANTsRCore_antsImageIterator_GoToBegin", (DL_FUNC) &_ANTsRCore_antsImageIterator_GoToBegin, 1},
    {"_ANTsRCore_antsImageIterator_GetIndex", (DL_FUNC) &_ANTsRCore_antsImageIterator_GetIndex, 1},
    {"_ANTsRCore_antsImageIterator_SetIndex", (DL_FUNC) &_ANTsRCore_antsImageIterator_SetIndex, 2},
    {"_ANTsRCore_antsImageIterator_Remaining", (DL_FUNC) &_ANTsRCore_antsImageIterator_Remaining, 1},
    {"_ANTsRCore_antsImageIterator_GoToReverseBegin", (DL_FUNC) &_ANTsRCore_antsImageIterator_GoToReverseBegin, 1},
    {"_ANTsRCore_antsImageIterator_IsAtReverseEnd", (DL_FUNC) &_ANTsRCore_antsImageIterator_IsAtReverseEnd, 1},
    {"_ANTsRCore_antsImageLogicImageNumeric", (DL_FUNC) &_ANTsRCore_antsImageLogicImageNumeric, 3},
    {"_ANTsRCore_antsImageLogicImageImage", (DL_FUNC) &_ANTsRCore_antsImageLogicImageImage, 3},
    {"_ANTsRCore_antsImageMath", (DL_FUNC) &_ANTsRCore_antsImageMath, 2},
    {"_ANTsRCore_antsImageMutualInformation", (DL_FUNC) &_ANTsRCore_antsImageMutualInformation, 2},
    {"_ANTsRCore_AntsImageRead", (DL_FUNC) &_ANTsRCore_AntsImageRead, 4},
    {"_ANTsRCore_AntsImageStats", (DL_FUNC) &_ANTsRCore_AntsImageStats, 3},
    {"_ANTsRCore_AntsImageWrite", (DL_FUNC) &_ANTsRCore_AntsImageWrite, 3},
    {"_ANTsRCore_antsJointFusion", (DL_FUNC) &_ANTsRCore_antsJointFusion, 1},
    {"_ANTsRCore_antsMatrix", (DL_FUNC) &_ANTsRCore_antsMatrix, 1},
    {"_ANTsRCore_antsMatrix_asList", (DL_FUNC) &_ANTsRCore_antsMatrix_asList, 1},
    {"_ANTsRCore_antsMatrix_asantsMatrix", (DL_FUNC) &_ANTsRCore_antsMatrix_asantsMatrix, 2},
    {"_ANTsRCore_AntsMotionCorr", (DL_FUNC) &_ANTsRCore_AntsMotionCorr, 1},
    {"_ANTsRCore_antsMotionCorrStats", (DL_FUNC) &_ANTsRCore_antsMotionCorrStats, 4},
    {"_ANTsRCore_AntsRegistration", (DL_FUNC) &_ANTsRCore_AntsRegistration, 1},
    {"_ANTsRCore_antsrMetric", (DL_FUNC) &_ANTsRCore_antsrMetric, 6},
    {"_ANTsRCore_antsrMetric_SetImage", (DL_FUNC) &_ANTsRCore_antsrMetric_SetImage, 4},
    {"_ANTsRCore_antsrMetric_SetTransform", (DL_FUNC) &_ANTsRCore_antsrMetric_SetTransform, 3},
    {"_ANTsRCore_antsrMetric_GetValue", (DL_FUNC) &_ANTsRCore_antsrMetric_GetValue, 1},
    {"_ANTsRCore_antsrMetric_GetDerivative", (DL_FUNC) &_ANTsRCore_antsrMetric_GetDerivative, 1},
    {"_ANTsRCore_antsrMetric_SetSampling", (DL_FUNC) &_ANTsRCore_antsrMetric_SetSampling, 3},
    {"_ANTsRCore_antsrMetric_SetNumberOfHistogramBins", (DL_FUNC) &_ANTsRCore_antsrMetric_SetNumberOfHistogramBins, 2},
    {"_ANTsRCore_antsrMetric_SetRadius", (DL_FUNC) &_ANTsRCore_antsrMetric_SetRadius, 2},
    {"_ANTsRCore_antsrMetric_Initialize", (DL_FUNC) &_ANTsRCore_antsrMetric_Initialize, 1},
    {"_ANTsRCore_antsrTransform", (DL_FUNC) &_ANTsRCore_antsrTransform, 3},
    {"_ANTsRCore_antsrTransform_MatrixOffset", (DL_FUNC) &_ANTsRCore_antsrTransform_MatrixOffset, 9},
    {"_ANTsRCore_antsrTransform_GetParameters", (DL_FUNC) &_ANTsRCore_antsrTransform_GetParameters, 1},
    {"_ANTsRCore_antsrTransform_SetParameters", (DL_FUNC) &_ANTsRCore_antsrTransform_SetParameters, 2},
    {"_ANTsRCore_antsrTransform_GetFixedParameters", (DL_FUNC) &_ANTsRCore_antsrTransform_GetFixedParameters, 1},
    {"_ANTsRCore_antsrTransform_SetFixedParameters", (DL_FUNC) &_ANTsRCore_antsrTransform_SetFixedParameters, 2},
    {"_ANTsRCore_antsrTransform_TransformPoint", (DL_FUNC) &_ANTsRCore_antsrTransform_TransformPoint, 2},
    {"_ANTsRCore_antsrTransform_TransformVector", (DL_FUNC) &_ANTsRCore_antsrTransform_TransformVector, 2},
    {"_ANTsRCore_antsrTransform_TransformImage", (DL_FUNC) &_ANTsRCore_antsrTransform_TransformImage, 4},
    {"_ANTsRCore_antsrTransform_Read", (DL_FUNC) &_ANTsRCore_antsrTransform_Read, 3},
    {"_ANTsRCore_antsrTransform_Compose", (DL_FUNC) &_ANTsRCore_antsrTransform_Compose, 3},
    {"_ANTsRCore_antsrTransform_FromDisplacementField", (DL_FUNC) &_ANTsRCore_antsrTransform_FromDisplacementField, 1},
    {"_ANTsRCore_antsrTransform_ToDisplacementField", (DL_FUNC) &_ANTsRCore_antsrTransform_ToDisplacementField, 2},
    {"_ANTsRCore_antsrTransform_Inverse", (DL_FUNC) &_ANTsRCore_antsrTransform_Inverse, 1},
    {"_ANTsRCore_antsrTransform_Write", (DL_FUNC) &_ANTsRCore_antsrTransform_Write, 2},
    {"_ANTsRCore_CropImage", (DL_FUNC) &_ANTsRCore_CropImage, 6},
    {"_ANTsRCore_ExtractSlice", (DL_FUNC) &_ANTsRCore_ExtractSlice, 4},
    {"_ANTsRCore_fastMarchingExtension", (DL_FUNC) &_ANTsRCore_fastMarchingExtension, 3},
    {"_ANTsRCore_fsl2antsrTransformR", (DL_FUNC) &_ANTsRCore_fsl2antsrTransformR, 4},
    {"_ANTsRCore_iMathInterface", (DL_FUNC) &_ANTsRCore_iMathInterface, 1},
    {"_ANTsRCore_iMathInterface1", (DL_FUNC) &_ANTsRCore_iMathInterface1, 1},
    {"_ANTsRCore_iMathInterface2", (DL_FUNC) &_ANTsRCore_iMathInterface2, 1},
    {"_ANTsRCore_imagesToMatrixR", (DL_FUNC) &_ANTsRCore_imagesToMatrixR, 3},
    {"_ANTsRCore_invariantImageSimilarity", (DL_FUNC) &_ANTsRCore_invariantImageSimilarity, 12},
    {"_ANTsRCore_itkConvolveImage", (DL_FUNC) &_ANTsRCore_itkConvolveImage, 2},
    {"_ANTsRCore_labelStatsR", (DL_FUNC) &_ANTsRCore_labelStatsR, 2},
    {"_ANTsRCore_makeImageR", (DL_FUNC) &_ANTsRCore_makeImageR, 6},
    {"_ANTsRCore_mergeChannelsR", (DL_FUNC) &_ANTsRCore_mergeChannelsR, 1},
    {"_ANTsRCore_blobAnalysis", (DL_FUNC) &_ANTsRCore_blobAnalysis, 6},
    {"_ANTsRCore_patchAnalysis", (DL_FUNC) &_ANTsRCore_patchAnalysis, 12},
    {"_ANTsRCore_rcpp_hello_world22", (DL_FUNC) &_ANTsRCore_rcpp_hello_world22, 0},
    {"_ANTsRCore_rcpp_hello_world33", (DL_FUNC) &_ANTsRCore_rcpp_hello_world33, 0},
    {"_ANTsRCore_reflectionMatrixR", (DL_FUNC) &_ANTsRCore_reflectionMatrixR, 3},
    {"_ANTsRCore_reorientImageR", (DL_FUNC) &_ANTsRCore_reorientImageR, 6},
    {"_ANTsRCore_centerOfMass", (DL_FUNC) &_ANTsRCore_centerOfMass, 1},
    {"_ANTsRCore_sccanX", (DL_FUNC) &_ANTsRCore_sccanX, 1},
    {"_ANTsRCore_robustMatrixTransform", (DL_FUNC) &_ANTsRCore_robustMatrixTransform, 1},
    {"_ANTsRCore_eigenanatomyCpp", (DL_FUNC) &_ANTsRCore_eigenanatomyCpp, 15},
    {"_ANTsRCore_sccanCpp", (DL_FUNC) &_ANTsRCore_sccanCpp, 19},
    {"_ANTsRCore_smoothImageR", (DL_FUNC) &_ANTsRCore_smoothImageR, 5},
    {"_ANTsRCore_splitChannelsR", (DL_FUNC) &_ANTsRCore_splitChannelsR, 1},
    {"_ANTsRCore_timeSeriesSubtraction", (DL_FUNC) &_ANTsRCore_timeSeriesSubtraction, 2},
    {"_ANTsRCore_weingartenImageCurvatureR", (DL_FUNC) &_ANTsRCore_weingartenImageCurvatureR, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ANTsRCore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
